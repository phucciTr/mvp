var placesId = [];
var map, marker, infowindow, infowindowContent;

function initMap() {
  map = new google.maps.Map(document.getElementById("map"), {
    center: { lat: -33.8688, lng: 151.2195 },
    zoom: 13
  });

  const input = document.getElementById("pac-input");
  const autocomplete = new google.maps.places.Autocomplete(input);
  autocomplete.bindTo("bounds", map);

  const dest1 = document.getElementById('dest1');
  const autocomplete1 = new google.maps.places.Autocomplete(dest1);
  autocomplete1.bindTo('bounds', map);

  // Specify just the place data fields that you need.
  autocomplete.setFields(["place_id", "geometry", "name"]);
  map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

  autocomplete1.setFields(['place_id', 'geometry', 'name']);
  map.controls[google.maps.ControlPosition.TOP_LEFT].push(dest1);

  infowindow = new google.maps.InfoWindow();
  infowindowContent = document.getElementById("infowindow-content");
  infowindow.setContent(infowindowContent);

  marker = new google.maps.Marker({ map: map });
  marker.addListener("click", () => {
    infowindow.open(map, marker);
  });

  autocomplete1.addListener('place_changed', placeChangeHandler.bind(this, autocomplete1));
  autocomplete.addListener('place_changed', placeChangeHandler.bind(this, autocomplete));
}

var placeChangeHandler = autocomp => {

  infowindow.close();
  let place = autocomp.getPlace();

  if (!place.geometry) {
    return;
  }

  if (place.geometry.viewport) {
    map.fitBounds(place.geometry.viewport);
  } else {
    map.setCenter(place.geometry.location);
    map.setZoom(17);
  }

  // Set the position of the marker using the place ID and location.
  marker.setPlace({
    placeId: place.place_id,
    location: place.geometry.location
  });

  marker.setVisible(true);
  infowindowContent.children.namedItem("place-name").textContent = place.name;
  infowindowContent.children.namedItem("place-id").textContent = place.place_id;
  infowindowContent.children.namedItem("place-address").textContent = place.formatted_address;
  infowindow.open(map, marker);

  placesId.push(place.place_id);

  if (placesId[1]) {
    const directionsService = new google.maps.DirectionsService();
    const directionsRenderer = new google.maps.DirectionsRenderer();
    directionsRenderer.setMap(map);

    calculateAndDisplayRoute(directionsService, directionsRenderer);
  }
};

var calculateAndDisplayRoute = (directionsService, directionsRenderer) => {

  console.log('placesId = ', placesId);
  directionsService.route({
    origin: { placeId: placesId[0] },
    destination: { placeId: placesId[1] },
    travelMode: google.maps.TravelMode.DRIVING
  }, (response, status) => {
    if (status === "OK") {
      console.log('response = ', response);
      directionsRenderer.setDirections(response);
    } else {
      window.alert("Directions request failed due to " + status);
    }
  });
};

export default initMap;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvZ21hcEluaXQuanMiXSwibmFtZXMiOlsicGxhY2VzSWQiLCJtYXAiLCJtYXJrZXIiLCJpbmZvd2luZG93IiwiaW5mb3dpbmRvd0NvbnRlbnQiLCJpbml0TWFwIiwiZ29vZ2xlIiwibWFwcyIsIk1hcCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJjZW50ZXIiLCJsYXQiLCJsbmciLCJ6b29tIiwiaW5wdXQiLCJhdXRvY29tcGxldGUiLCJwbGFjZXMiLCJBdXRvY29tcGxldGUiLCJiaW5kVG8iLCJkZXN0MSIsImF1dG9jb21wbGV0ZTEiLCJzZXRGaWVsZHMiLCJjb250cm9scyIsIkNvbnRyb2xQb3NpdGlvbiIsIlRPUF9MRUZUIiwicHVzaCIsIkluZm9XaW5kb3ciLCJzZXRDb250ZW50IiwiTWFya2VyIiwiYWRkTGlzdGVuZXIiLCJvcGVuIiwicGxhY2VDaGFuZ2VIYW5kbGVyIiwiYmluZCIsImF1dG9jb21wIiwiY2xvc2UiLCJwbGFjZSIsImdldFBsYWNlIiwiZ2VvbWV0cnkiLCJ2aWV3cG9ydCIsImZpdEJvdW5kcyIsInNldENlbnRlciIsImxvY2F0aW9uIiwic2V0Wm9vbSIsInNldFBsYWNlIiwicGxhY2VJZCIsInBsYWNlX2lkIiwic2V0VmlzaWJsZSIsImNoaWxkcmVuIiwibmFtZWRJdGVtIiwidGV4dENvbnRlbnQiLCJuYW1lIiwiZm9ybWF0dGVkX2FkZHJlc3MiLCJkaXJlY3Rpb25zU2VydmljZSIsIkRpcmVjdGlvbnNTZXJ2aWNlIiwiZGlyZWN0aW9uc1JlbmRlcmVyIiwiRGlyZWN0aW9uc1JlbmRlcmVyIiwic2V0TWFwIiwiY2FsY3VsYXRlQW5kRGlzcGxheVJvdXRlIiwiY29uc29sZSIsImxvZyIsInJvdXRlIiwib3JpZ2luIiwiZGVzdGluYXRpb24iLCJ0cmF2ZWxNb2RlIiwiVHJhdmVsTW9kZSIsIkRSSVZJTkciLCJyZXNwb25zZSIsInN0YXR1cyIsInNldERpcmVjdGlvbnMiLCJ3aW5kb3ciLCJhbGVy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QixRQUFJQSxXQUFXLElBQWYsRUFBcUI7QUFDbkJULGNBQVFDLEdBQVIsQ0FBWSxhQUFaLEVBQTJCTyxRQUEzQjtBQUNBWix5QkFBbUJjLGFBQW5CLENBQWlDRixRQUFqQztBQUNELEtBSEQsTUFHTztBQUNMRyxhQUFPQyxLQUFQLENBQWEsc0NBQXNDSCxNQUFuRDtBQUNEO0FBQ0YsR0FiSDtBQWdCRCxDQW5CRDs7QUF1QkEsZUFBZS9ELE9BQWYiLCJmaWxlIjoiZ21hcEluaXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcGxhY2VzSWQgPSBbXTtcbnZhciBtYXAsIG1hcmtlciwgaW5mb3dpbmRvdywgaW5mb3dpbmRvd0NvbnRlbnQ7XG5cblxuZnVuY3Rpb24gaW5pdE1hcCgpIHtcbiAgbWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1hcFwiKSwge1xuICAgIGNlbnRlcjogeyBsYXQ6IC0zMy44Njg4LCBsbmc6IDE1MS4yMTk1IH0sXG4gICAgem9vbTogMTMsXG4gIH0pO1xuXG4gIGNvbnN0IGlucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwYWMtaW5wdXRcIik7XG4gIGNvbnN0IGF1dG9jb21wbGV0ZSA9IG5ldyBnb29nbGUubWFwcy5wbGFjZXMuQXV0b2NvbXBsZXRlKGlucHV0KTtcbiAgYXV0b2NvbXBsZXRlLmJpbmRUbyhcImJvdW5kc1wiLCBtYXApO1xuXG4gIGNvbnN0IGRlc3QxID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Rlc3QxJyk7XG4gIGNvbnN0IGF1dG9jb21wbGV0ZTEgPSBuZXcgZ29vZ2xlLm1hcHMucGxhY2VzLkF1dG9jb21wbGV0ZShkZXN0MSk7XG4gIGF1dG9jb21wbGV0ZTEuYmluZFRvKCdib3VuZHMnLCBtYXApO1xuXG4gIC8vIFNwZWNpZnkganVzdCB0aGUgcGxhY2UgZGF0YSBmaWVsZHMgdGhhdCB5b3UgbmVlZC5cbiAgYXV0b2NvbXBsZXRlLnNldEZpZWxkcyhbXCJwbGFjZV9pZFwiLCBcImdlb21ldHJ5XCIsIFwibmFtZVwiXSk7XG4gIG1hcC5jb250cm9sc1tnb29nbGUubWFwcy5Db250cm9sUG9zaXRpb24uVE9QX0xFRlRdLnB1c2goaW5wdXQpO1xuXG4gIGF1dG9jb21wbGV0ZTEuc2V0RmllbGRzKFsncGxhY2VfaWQnLCAnZ2VvbWV0cnknLCAnbmFtZSddKTtcbiAgbWFwLmNvbnRyb2xzW2dvb2dsZS5tYXBzLkNvbnRyb2xQb3NpdGlvbi5UT1BfTEVGVF0ucHVzaChkZXN0MSk7XG5cbiAgaW5mb3dpbmRvdyA9IG5ldyBnb29nbGUubWFwcy5JbmZvV2luZG93KCk7XG4gIGluZm93aW5kb3dDb250ZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJpbmZvd2luZG93LWNvbnRlbnRcIik7XG4gIGluZm93aW5kb3cuc2V0Q29udGVudChpbmZvd2luZG93Q29udGVudCk7XG5cbiAgbWFya2VyID0gbmV3IGdvb2dsZS5tYXBzLk1hcmtlcih7IG1hcDogbWFwIH0pO1xuICBtYXJrZXIuYWRkTGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgaW5mb3dpbmRvdy5vcGVuKG1hcCwgbWFya2VyKTtcbiAgfSk7XG5cbiAgYXV0b2NvbXBsZXRlMS5hZGRMaXN0ZW5lcigncGxhY2VfY2hhbmdlZCcsIHBsYWNlQ2hhbmdlSGFuZGxlci5iaW5kKHRoaXMsIGF1dG9jb21wbGV0ZTEpKVxuICBhdXRvY29tcGxldGUuYWRkTGlzdGVuZXIoJ3BsYWNlX2NoYW5nZWQnLCBwbGFjZUNoYW5nZUhhbmRsZXIuYmluZCh0aGlzLCBhdXRvY29tcGxldGUpKTtcbn1cblxuXG52YXIgcGxhY2VDaGFuZ2VIYW5kbGVyID0gKGF1dG9jb21wKSA9PiB7XG5cbiAgaW5mb3dpbmRvdy5jbG9zZSgpO1xuICBsZXQgcGxhY2UgPSBhdXRvY29tcC5nZXRQbGFjZSgpO1xuXG4gIGlmICghcGxhY2UuZ2VvbWV0cnkpIHsgcmV0dXJuOyB9XG5cbiAgaWYgKHBsYWNlLmdlb21ldHJ5LnZpZXdwb3J0KSB7XG4gICAgbWFwLmZpdEJvdW5kcyhwbGFjZS5nZW9tZXRyeS52aWV3cG9ydCk7XG4gIH0gZWxzZSB7XG4gICAgbWFwLnNldENlbnRlcihwbGFjZS5nZW9tZXRyeS5sb2NhdGlvbik7XG4gICAgbWFwLnNldFpvb20oMTcpO1xuICB9XG5cbiAgLy8gU2V0IHRoZSBwb3NpdGlvbiBvZiB0aGUgbWFya2VyIHVzaW5nIHRoZSBwbGFjZSBJRCBhbmQgbG9jYXRpb24uXG4gIG1hcmtlci5zZXRQbGFjZSh7XG4gICAgcGxhY2VJZDogcGxhY2UucGxhY2VfaWQsXG4gICAgbG9jYXRpb246IHBsYWNlLmdlb21ldHJ5LmxvY2F0aW9uLFxuICB9KTtcblxuICBtYXJrZXIuc2V0VmlzaWJsZSh0cnVlKTtcbiAgaW5mb3dpbmRvd0NvbnRlbnQuY2hpbGRyZW4ubmFtZWRJdGVtKFwicGxhY2UtbmFtZVwiKS50ZXh0Q29udGVudCA9IHBsYWNlLm5hbWU7XG4gIGluZm93aW5kb3dDb250ZW50LmNoaWxkcmVuLm5hbWVkSXRlbShcInBsYWNlLWlkXCIpLnRleHRDb250ZW50ID0gcGxhY2UucGxhY2VfaWQ7XG4gIGluZm93aW5kb3dDb250ZW50LmNoaWxkcmVuLm5hbWVkSXRlbShcInBsYWNlLWFkZHJlc3NcIikudGV4dENvbnRlbnQgPSBwbGFjZS5mb3JtYXR0ZWRfYWRkcmVzcztcbiAgaW5mb3dpbmRvdy5vcGVuKG1hcCwgbWFya2VyKTtcblxuICBwbGFjZXNJZC5wdXNoKHBsYWNlLnBsYWNlX2lkKTtcblxuICBpZiAocGxhY2VzSWRbMV0pIHtcbiAgICBjb25zdCBkaXJlY3Rpb25zU2VydmljZSA9IG5ldyBnb29nbGUubWFwcy5EaXJlY3Rpb25zU2VydmljZSgpO1xuICAgIGNvbnN0IGRpcmVjdGlvbnNSZW5kZXJlciA9IG5ldyBnb29nbGUubWFwcy5EaXJlY3Rpb25zUmVuZGVyZXIoKTtcbiAgICBkaXJlY3Rpb25zUmVuZGVyZXIuc2V0TWFwKG1hcCk7XG5cbiAgICBjYWxjdWxhdGVBbmREaXNwbGF5Um91dGUoZGlyZWN0aW9uc1NlcnZpY2UsIGRpcmVjdGlvbnNSZW5kZXJlcik7XG4gIH1cbn07XG5cblxudmFyIGNhbGN1bGF0ZUFuZERpc3BsYXlSb3V0ZSA9IChkaXJlY3Rpb25zU2VydmljZSwgZGlyZWN0aW9uc1JlbmRlcmVyKSA9PiB7XG5cbiAgY29uc29sZS5sb2coJ3BsYWNlc0lkID0gJywgcGxhY2VzSWQpO1xuICBkaXJlY3Rpb25zU2VydmljZS5yb3V0ZShcbiAgICB7XG4gICAgICBvcmlnaW46IHsgcGxhY2VJZDogcGxhY2VzSWRbMF0gfSxcbiAgICAgIGRlc3RpbmF0aW9uOiB7IHBsYWNlSWQ6IHBsYWNlc0lkWzFdIH0sXG4gICAgICB0cmF2ZWxNb2RlOiBnb29nbGUubWFwcy5UcmF2ZWxNb2RlLkRSSVZJTkcsXG4gICAgfSxcbiAgICAocmVzcG9uc2UsIHN0YXR1cykgPT4ge1xuICAgICAgaWYgKHN0YXR1cyA9PT0gXCJPS1wiKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdyZXNwb25zZSA9ICcsIHJlc3BvbnNlKTtcbiAgICAgICAgZGlyZWN0aW9uc1JlbmRlcmVyLnNldERpcmVjdGlvbnMocmVzcG9uc2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LmFsZXJ0KFwiRGlyZWN0aW9ucyByZXF1ZXN0IGZhaWxlZCBkdWUgdG8gXCIgKyBzdGF0dXMpO1xuICAgICAgfVxuICAgIH1cbiAgKTtcblxufTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGluaXRNYXA7XG4iXX0=