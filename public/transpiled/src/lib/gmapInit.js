var placesId = [];

function initMap() {
  const map = new google.maps.Map(document.getElementById("map"), {
    center: { lat: -33.8688, lng: 151.2195 },
    zoom: 13
  });

  const input = document.getElementById("pac-input");
  const autocomplete = new google.maps.places.Autocomplete(input);
  autocomplete.bindTo("bounds", map);

  // Specify just the place data fields that you need.
  autocomplete.setFields(["place_id", "geometry", "name"]);
  map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

  const infowindow = new google.maps.InfoWindow();
  const infowindowContent = document.getElementById("infowindow-content");
  infowindow.setContent(infowindowContent);

  const marker = new google.maps.Marker({ map: map });
  marker.addListener("click", () => {
    infowindow.open(map, marker);
  });

  autocomplete.addListener("place_changed", () => {
    infowindow.close();
    const place = autocomplete.getPlace();

    if (!place.geometry) {
      return;
    }

    if (place.geometry.viewport) {
      map.fitBounds(place.geometry.viewport);
    } else {
      map.setCenter(place.geometry.location);
      map.setZoom(17);
    }

    // Set the position of the marker using the place ID and location.
    marker.setPlace({
      placeId: place.place_id,
      location: place.geometry.location
    });

    marker.setVisible(true);
    infowindowContent.children.namedItem("place-name").textContent = place.name;
    infowindowContent.children.namedItem("place-id").textContent = place.place_id;
    infowindowContent.children.namedItem("place-address").textContent = place.formatted_address;
    infowindow.open(map, marker);

    placesId.push(place.place_id);
    console.log('placesId = ', placesId);
  });
}

export default initMap;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvZ21hcEluaXQuanMiXSwibmFtZXMiOlsicGxhY2VzSWQiLCJpbml0TWFwIiwibWFwIiwiZ29vZ2xlIiwibWFwcyIsIk1hcCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJjZW50ZXIiLCJsYXQiLCJsbmciLCJ6b29tIiwiaW5wdXQiLCJhdXRvY29tcGxldGUiLCJwbGFjZXMiLCJBdXRvY29tcGxldGUiLCJiaW5kVG8iLCJzZXRGaWVsZHMiLCJjb250cm9scyIsIkNvbnRyb2xQb3NpdGlvbiIsIlRPUF9MRUZUIiwicHVzaCIsImluZm93aW5kb3ciLCJJbmZvV2luZG93IiwiaW5mb3dpbmRvd0NvbnRlbnQiLCJzZXRDb250ZW50IiwibWFya2VyIiwiTWFya2VyIiwiYWRkTGlzdGVuZXIiLCJvcGVuIiwiY2xvc2UiLCJwbGFjZSIsImdldFBsYWNlIiwiZ2VvbWV0cnkiLCJ2aWV3cG9ydCIsImZpdEJvdW5kcyIsInNldENlbnRlciIsImxvY2F0aW9uIiwic2V0Wm9vbSIsInNldFBsYWNlIiwicGxhY2VJZCIsInBsYWNlX2lkIiwic2V0VmlzaWJsZSIsImNoaWxkcmVuIiwibmFtZWRJdGVtIiwidGV4dENvbnRlbnQiLCJuYW1lIiwiZm9ybWF0dGVkX2FkZHJlc3MiLCJjb25zb2xlIiwibG9nIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxXQUFXLEVBQWY7O0FBRUEsU0FBU0MsT0FBVCxHQUFtQjtBQUNqQixRQUFNQyxNQUFNLElBQUlDLE9BQU9DLElBQVAsQ0FBWUMsR0FBaEIsQ0FBb0JDLFNBQVNDLGNBQVQsQ0FBd0IsS0FBeEIsQ0FBcEIsRUFBb0Q7QUFDOURDLFlBQVEsRUFBRUMsS0FBSyxDQUFDLE9BQVIsRUFBaUJDLEtBQUssUUFBdEIsRUFEc0Q7QUFFOURDLFVBQU07QUFGd0QsR0FBcEQsQ0FBWjs7QUFLQSxRQUFNQyxRQUFRTixTQUFTQyxjQUFULENBQXdCLFdBQXhCLENBQWQ7QUFDQSxRQUFNTSxlQUFlLElBQUlWLE9BQU9DLElBQVAsQ0FBWVUsTUFBWixDQUFtQkMsWUFBdkIsQ0FBb0NILEtBQXBDLENBQXJCO0FBQ0FDLGVBQWFHLE1BQWIsQ0FBb0IsUUFBcEIsRUFBOEJkLEdBQTlCOztBQUVBO0FBQ0FXLGVBQWFJLFNBQWIsQ0FBdUIsQ0FBQyxVQUFELEVBQWEsVUFBYixFQUF5QixNQUF6QixDQUF2QjtBQUNBZixNQUFJZ0IsUUFBSixDQUFhZixPQUFPQyxJQUFQLENBQVllLGVBQVosQ0FBNEJDLFFBQXpDLEVBQW1EQyxJQUFuRCxDQUF3RFQsS0FBeEQ7O0FBRUEsUUFBTVUsYUFBYSxJQUFJbkIsT0FBT0MsSUFBUCxDQUFZbUIsVUFBaEIsRUFBbkI7QUFDQSxRQUFNQyxvQkFBb0JsQixTQUFTQyxjQUFULENBQXdCLG9CQUF4QixDQUExQjtBQUNBZSxhQUFXRyxVQUFYLENBQXNCRCxpQkFBdEI7O0FBRUEsUUFBTUUsU0FBUyxJQUFJdkIsT0FBT0MsSUFBUCxDQUFZdUIsTUFBaEIsQ0FBdUIsRUFBRXpCLEtBQUtBLEdBQVAsRUFBdkIsQ0FBZjtBQUNBd0IsU0FBT0UsV0FBUCxDQUFtQixPQUFuQixFQUE0QixNQUFNO0FBQ2hDTixlQUFXTyxJQUFYLENBQWdCM0IsR0FBaEIsRUFBcUJ3QixNQUFyQjtBQUNELEdBRkQ7O0FBSUFiLGVBQWFlLFdBQWIsQ0FBeUIsZUFBekIsRUFBMEMsTUFBTTtBQUM5Q04sZUFBV1EsS0FBWDtBQUNBLFVBQU1DLFFBQVFsQixhQUFhbUIsUUFBYixFQUFkOztBQUVBLFFBQUksQ0FBQ0QsTUFBTUUsUUFBWCxFQUFxQjtBQUNuQjtBQUNEOztBQUVELFFBQUlGLE1BQU1FLFFBQU4sQ0FBZUMsUUFBbkIsRUFBNkI7QUFDM0JoQyxVQUFJaUMsU0FBSixDQUFjSixNQUFNRSxRQUFOLENBQWVDLFFBQTdCO0FBQ0QsS0FGRCxNQUVPO0FBQ0xoQyxVQUFJa0MsU0FBSixDQUFjTCxNQUFNRSxRQUFOLENBQWVJLFFBQTdCO0FBQ0FuQyxVQUFJb0MsT0FBSixDQUFZLEVBQVo7QUFDRDs7QUFFRDtBQUNBWixXQUFPYSxRQUFQLENBQWdCO0FBQ2RDLGVBQVNULE1BQU1VLFFBREQ7QUFFZEosZ0JBQVVOLE1BQU1FLFFBQU4sQ0FBZUk7QUFGWCxLQUFoQjs7QUFLQVgsV0FBT2dCLFVBQVAsQ0FBa0IsSUFBbEI7QUFDQWxCLHNCQUFrQm1CLFFBQWxCLENBQTJCQyxTQUEzQixDQUFxQyxZQUFyQyxFQUFtREMsV0FBbkQsR0FBaUVkLE1BQU1lLElBQXZFO0FBQ0F0QixzQkFBa0JtQixRQUFsQixDQUEyQkMsU0FBM0IsQ0FBcUMsVUFBckMsRUFBaURDLFdBQWpELEdBQStEZCxNQUFNVSxRQUFyRTtBQUNBakIsc0JBQWtCbUIsUUFBbEIsQ0FBMkJDLFNBQTNCLENBQXFDLGVBQXJDLEVBQXNEQyxXQUF0RCxHQUFvRWQsTUFBTWdCLGlCQUExRTtBQUNBekIsZUFBV08sSUFBWCxDQUFnQjNCLEdBQWhCLEVBQXFCd0IsTUFBckI7O0FBRUExQixhQUFTcUIsSUFBVCxDQUFjVSxNQUFNVSxRQUFwQjtBQUNBTyxZQUFRQyxHQUFSLENBQVksYUFBWixFQUEyQmpELFFBQTNCO0FBQ0QsR0E3QkQ7QUE4QkQ7O0FBR0QsZUFBZUMsT0FBZiIsImZpbGUiOiJnbWFwSW5pdC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBwbGFjZXNJZCA9IFtdO1xuXG5mdW5jdGlvbiBpbml0TWFwKCkge1xuICBjb25zdCBtYXAgPSBuZXcgZ29vZ2xlLm1hcHMuTWFwKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWFwXCIpLCB7XG4gICAgY2VudGVyOiB7IGxhdDogLTMzLjg2ODgsIGxuZzogMTUxLjIxOTUgfSxcbiAgICB6b29tOiAxMyxcbiAgfSk7XG5cbiAgY29uc3QgaW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBhYy1pbnB1dFwiKTtcbiAgY29uc3QgYXV0b2NvbXBsZXRlID0gbmV3IGdvb2dsZS5tYXBzLnBsYWNlcy5BdXRvY29tcGxldGUoaW5wdXQpO1xuICBhdXRvY29tcGxldGUuYmluZFRvKFwiYm91bmRzXCIsIG1hcCk7XG5cbiAgLy8gU3BlY2lmeSBqdXN0IHRoZSBwbGFjZSBkYXRhIGZpZWxkcyB0aGF0IHlvdSBuZWVkLlxuICBhdXRvY29tcGxldGUuc2V0RmllbGRzKFtcInBsYWNlX2lkXCIsIFwiZ2VvbWV0cnlcIiwgXCJuYW1lXCJdKTtcbiAgbWFwLmNvbnRyb2xzW2dvb2dsZS5tYXBzLkNvbnRyb2xQb3NpdGlvbi5UT1BfTEVGVF0ucHVzaChpbnB1dCk7XG5cbiAgY29uc3QgaW5mb3dpbmRvdyA9IG5ldyBnb29nbGUubWFwcy5JbmZvV2luZG93KCk7XG4gIGNvbnN0IGluZm93aW5kb3dDb250ZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJpbmZvd2luZG93LWNvbnRlbnRcIik7XG4gIGluZm93aW5kb3cuc2V0Q29udGVudChpbmZvd2luZG93Q29udGVudCk7XG5cbiAgY29uc3QgbWFya2VyID0gbmV3IGdvb2dsZS5tYXBzLk1hcmtlcih7IG1hcDogbWFwIH0pO1xuICBtYXJrZXIuYWRkTGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgaW5mb3dpbmRvdy5vcGVuKG1hcCwgbWFya2VyKTtcbiAgfSk7XG5cbiAgYXV0b2NvbXBsZXRlLmFkZExpc3RlbmVyKFwicGxhY2VfY2hhbmdlZFwiLCAoKSA9PiB7XG4gICAgaW5mb3dpbmRvdy5jbG9zZSgpO1xuICAgIGNvbnN0IHBsYWNlID0gYXV0b2NvbXBsZXRlLmdldFBsYWNlKCk7XG5cbiAgICBpZiAoIXBsYWNlLmdlb21ldHJ5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHBsYWNlLmdlb21ldHJ5LnZpZXdwb3J0KSB7XG4gICAgICBtYXAuZml0Qm91bmRzKHBsYWNlLmdlb21ldHJ5LnZpZXdwb3J0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbWFwLnNldENlbnRlcihwbGFjZS5nZW9tZXRyeS5sb2NhdGlvbik7XG4gICAgICBtYXAuc2V0Wm9vbSgxNyk7XG4gICAgfVxuXG4gICAgLy8gU2V0IHRoZSBwb3NpdGlvbiBvZiB0aGUgbWFya2VyIHVzaW5nIHRoZSBwbGFjZSBJRCBhbmQgbG9jYXRpb24uXG4gICAgbWFya2VyLnNldFBsYWNlKHtcbiAgICAgIHBsYWNlSWQ6IHBsYWNlLnBsYWNlX2lkLFxuICAgICAgbG9jYXRpb246IHBsYWNlLmdlb21ldHJ5LmxvY2F0aW9uLFxuICAgIH0pO1xuXG4gICAgbWFya2VyLnNldFZpc2libGUodHJ1ZSk7XG4gICAgaW5mb3dpbmRvd0NvbnRlbnQuY2hpbGRyZW4ubmFtZWRJdGVtKFwicGxhY2UtbmFtZVwiKS50ZXh0Q29udGVudCA9IHBsYWNlLm5hbWU7XG4gICAgaW5mb3dpbmRvd0NvbnRlbnQuY2hpbGRyZW4ubmFtZWRJdGVtKFwicGxhY2UtaWRcIikudGV4dENvbnRlbnQgPSBwbGFjZS5wbGFjZV9pZDtcbiAgICBpbmZvd2luZG93Q29udGVudC5jaGlsZHJlbi5uYW1lZEl0ZW0oXCJwbGFjZS1hZGRyZXNzXCIpLnRleHRDb250ZW50ID0gcGxhY2UuZm9ybWF0dGVkX2FkZHJlc3M7XG4gICAgaW5mb3dpbmRvdy5vcGVuKG1hcCwgbWFya2VyKTtcblxuICAgIHBsYWNlc0lkLnB1c2gocGxhY2UucGxhY2VfaWQpO1xuICAgIGNvbnNvbGUubG9nKCdwbGFjZXNJZCA9ICcsIHBsYWNlc0lkKTtcbiAgfSk7XG59XG5cblxuZXhwb3J0IGRlZmF1bHQgaW5pdE1hcDtcbiJdfQ==